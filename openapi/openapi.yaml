openapi: 3.1.0
info:
  title: "Тёплый Дом API"
  description: "API для управления умным домом: регистрация, авторизация, устройства, сценарии."
  version: "1.0.0"
  contact:
    name: "Тёплый Дом"
    email: "support@teplyy-dom.ru"

servers:
  - url: "https://api.teplyy-dom.ru" 
    description: "Основной сервер"

tags:
  - name: "Authentication"
    description: "Регистрация и авторизация"
  - name: "Users"
    description: "Управление пользователями"
  - name: "Devices"
    description: "Управление устройствами"
  - name: "Scenarios"
    description: "Управление сценариями автоматизации"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          format: password
        created_at:
          type: string
          format: date-time
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    Device:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Living Room Thermostat"
        serial_number:
          type: string
          example: "SN123456"
        type_id:
          type: string
          format: uuid
        house_id:
          type: string
          format: uuid
        is_online:
          type: boolean
        last_seen:
          type: string
          format: date-time
    Scenario:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Turn on lights at night"
        description:
          type: string
        enabled:
          type: boolean
        house_id:
          type: string
          format: uuid
        triggers:
          type: array
          items:
            type: object
            properties:
              trigger_type:
                type: string
              trigger_data:
                type: object
        actions:
          type: array
          items:
            type: object
            properties:
              action_type:
                type: string
              action_data:
                type: object
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:

  # Authentication
  /api/v1/auth/register:
    post:
      tags: ["Authentication"]
      summary: "Регистрация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              example:
                email: "user@example.com"
                password: "password123"
      responses:
        '201':
          description: "Пользователь создан"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: "Невалидные данные"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/login:
    post:
      tags: ["Authentication"]
      summary: "Авторизация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              example:
                email: "user@example.com"
                password: "password123"
      responses:
        '200':
          description: "Успешный вход"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "Неверные логин или пароль"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/logout:
    post:
      tags: ["Authentication"]
      summary: "Выход из аккаунта"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Успешный выход"
          content:
            application/json:
              example: { "message": "Logged out" }

  # Users
  /api/v1/users/me:
    delete:
      tags: ["Users"]
      summary: "Удаление учетной записи"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Аккаунт удален"
          content:
            application/json:
              example: { "message": "User deleted" }
        '401':
          description: "Неавторизован"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Devices
  /api/v1/devices:
    post:
      tags: ["Devices"]
      summary: "Регистрация устройства"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
            example:
              name: "Living Room Thermostat"
              serial_number: "SN123456"
              type_id: "d7e5f2a3-1b4c-4d8e-9a1b-2c3d4e5f6a7b"
              house_id: "h1a2b3c4-d5e6-7f89-g0h1-i2j3k4l5m6n7"
      responses:
        '201':
          description: "Устройство зарегистрировано"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: "Невалидные данные"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/devices/{device_id}:
    get:
      tags: ["Devices"]
      summary: "Получение информации об устройстве"
      security:
        - BearerAuth: []
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Информация об устройстве"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: "Устройство не найдено"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: ["Devices"]
      summary: "Удаление устройства"
      security:
        - BearerAuth: []
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Устройство удалено"
          content:
            application/json:
              example: { "message": "Device deleted" }
        '404':
          description: "Устройство не найдено"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Scenarios
  /api/v1/scenarios:
    post:
      tags: ["Scenarios"]
      summary: "Создание сценария"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
            example:
              name: "Turn on lights at night"
              description: "Включает свет в гостиной в 20:00"
              enabled: true
              house_id: "h1a2b3c4-d5e6-7f89-g0h1-i2j3k4l5m6n7"
              triggers:
                - trigger_type: "time-based"
                  trigger_data:
                    hour: 20
                    minute: 0
              actions:
                - action_type: "device-command"
                  action_data:
                    device_id: "d1e2f3a4-b5c6-7d8e-9f0a-1b2c3d4e5f6a"
                    command: "turn_on"
      responses:
        '201':
          description: "Сценарий создан"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
        '400':
          description: "Невалидные данные"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/scenarios/{scenario_id}:
    put:
      tags: ["Scenarios"]
      summary: "Обновление сценария"
      security:
        - BearerAuth: []
      parameters:
        - name: scenario_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scenario'
      responses:
        '200':
          description: "Сценарий обновлен"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
        '404':
          description: "Сценарий не найден"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: ["Scenarios"]
      summary: "Удаление сценария"
      security:
        - BearerAuth: []
      parameters:
        - name: scenario_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Сценарий удален"
          content:
            application/json:
              example: { "message": "Scenario deleted" }
        '404':
          description: "Сценарий не найден"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'